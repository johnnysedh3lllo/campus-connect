-- conversations
create table public.conversations (
    id bigint generated always as identity not null,
    conversation_uuid uuid null default gen_random_uuid (),
    user1_id uuid not null,
    user2_id uuid not null,
    last_message_id bigint null,
    created_at timestamp with time zone not null default now(),
    updated_at timestamp with time zone not null default now(),
    constraint conversations_pkey primary key (id),
    constraint conversations_conversation_uuid_key unique (conversation_uuid),
    constraint unique_conversation unique (user1_id, user2_id),
    constraint conversations_user1_id_fkey foreign key (user1_id) references profiles (id) on update cascade,
    constraint conversations_user2_id_fkey foreign key (user2_id) references profiles (id) on update cascade
) tablespace pg_default;

create index if not exists idx_conversations_user1_id on public.conversations using btree (user1_id) tablespace pg_default;

create index if not exists idx_conversations_user2_id on public.conversations using btree (user2_id) tablespace pg_default;

--
-- countries
create table public.countries (
    id bigint generated always as identity not null,
    name text not null,
    constraint countries_pkey primary key (id)
) tablespace pg_default;

--
-- messages
create table public.messages (
    id bigint generated always as identity not null,
    message_uuid uuid null default gen_random_uuid (),
    conversation_id bigint not null,
    sender_id uuid not null,
    content text not null,
    created_at timestamp with time zone not null default now(),
    read_at timestamp with time zone null,
    edited_at timestamp with time zone null,
    constraint messages_pkey primary key (id),
    constraint messages_message_uuid_key unique (message_uuid),
    constraint fk_conversation foreign key (conversation_id) references conversations (id) on delete cascade,
    constraint fk_sender foreign key (sender_id) references auth.users (id) on delete cascade
) tablespace pg_default;

create index if not exists idx_messages_conversation_id on public.messages using btree (conversation_id) tablespace pg_default;

create index if not exists idx_messages_sender_id on public.messages using btree (sender_id) tablespace pg_default;

--
-- profiles
create table public.profiles (
    id uuid not null,
    email text not null,
    phone text null,
    first_name text null,
    last_name text null,
    role_id integer not null,
    created_at timestamp with time zone null default now(),
    updated_at timestamp with time zone null default now(),
    constraint users_pkey primary key (id),
    constraint profiles_email_key unique (email),
    constraint profiles_id_fkey foreign key (id) references auth.users (id) on update cascade on delete cascade,
    constraint profiles_role_id_fkey foreign key (role_id) references roles (id) on update cascade on delete cascade
) tablespace pg_default;

create index if not exists idx_profiles_id on public.profiles using btree (id) tablespace pg_default;

-- 
-- properties
create table public.properties (
    id bigint generated by default as identity not null,
    landlord_id uuid null,
    title text null,
    description text null,
    location text null,
    price numeric null,
    created_at timestamp with time zone not null default now(),
    updated_at timestamp with time zone null,
    property_uuid uuid null default gen_random_uuid (),
    constraint properties_pkey primary key (id),
    constraint properties_landlord_id_fkey foreign key (landlord_id) references auth.users (id) on update cascade on delete cascade
) tablespace pg_default;

create index if not exists idx_properties_landlord_id on public.properties using btree (landlord_id) tablespace pg_default;

--
-- roles
create table public.roles (
    id serial not null,
    name text not null,
    description text null,
    created_at timestamp with time zone null default now(),
    updated_at timestamp with time zone null default now(),
    constraint roles_pkey primary key (id),
    constraint roles_name_key unique (name)
) tablespace pg_default;